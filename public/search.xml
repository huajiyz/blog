<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【洛谷P2704】【NOI2001】炮兵阵地 解题报告</title>
      <link href="/posts/51.html"/>
      <url>/posts/51.html</url>
      
        <content type="html"><![CDATA[<!-- build time:Wed Apr 08 2020 10:08:37 GMT+0800 (GMT+08:00) --><h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>司令部的将军们打算在 $N \times M$ 的网格地图上部署他们的炮兵部队。一个 $N \times M$ 的地图由 $N$ 行 $M$ 列组成，地图的每一格可能是山地（用 <code>H</code> 表示），也可能是平原（用 <code>P</code> 表示），如下图。在每一格平原地形上最多可以布置一支炮兵部队（山地上不能够部署炮兵部队）；一支炮兵部队在地图上的攻击范围如图中黑色区域所示：</p><p><img src="http://media.openjudge.cn/images/1185_1.jpg" alt></p><p>如果在地图中的灰色所标识的平原上部署一支炮兵部队，则图中的黑色的网格表示它能够攻击到的区域：沿横向左右各两格，沿纵向上下各两格。图上其它白色网格均攻击不到。从图上可见炮兵的攻击范围不受地形的影响。 现在，将军们规划如何部署炮兵部队，在防止误伤的前提下（保证任何两支炮兵部队之间不能互相攻击，即任何一支炮兵部队都不在其他支炮兵部队的攻击范围内），在整个地图区域内最多能够摆放多少我军的炮兵部队。</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>第一行包含两个由空格分割开的正整数，分别表示 $N$ 和 $M$ ；</p><p>接下来的 $N$ 行，每一行含有连续的 $M$ 个字符（<code>P</code> 或者 <code>H</code>），中间没有空格。按顺序表示地图中每一行的数据。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>仅一行，包含一个整数$K$，表示最多能摆放的炮兵部队的数量。</p><h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>样例输入</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ANGELSCRIPT"><figure class="iseeu highlight /angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> <span class="number">4</span></span><br><span class="line">PHPP</span><br><span class="line">PPHH</span><br><span class="line">PPPP</span><br><span class="line">PHPP</span><br><span class="line">PHHP</span><br></pre></td></tr></table></figure></div><p>样例输出</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ANGELSCRIPT"><figure class="iseeu highlight /angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure></div><h2 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h2><p>$100%$ 的数据，$N \leq 100；M \leq 10$</p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>题意很简单，即下图中的黑色十字架上不能放两个或以上的炮兵，不然会自己人打自己人<del>内讧</del>。然后只能在平地放炮兵。</p><p><img src="http://media.openjudge.cn/images/1185_1.jpg" alt></p><p>问你最多能放多少个炮兵。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><h2 id="暴力出奇迹"><a href="#暴力出奇迹" class="headerlink" title="暴力出奇迹"></a>暴力出奇迹</h2><p>怎么暴力？DFS枚举每个点放不放炮兵，最后统计一遍是否成立。</p><p>时间复杂度 $O(2^{nm} \times nm)$</p><p>$\Large \textbf {BOOM!}$</p><h2 id="正解——状压DP"><a href="#正解——状压DP" class="headerlink" title="正解——状压DP"></a>正解——状压DP</h2><p>因为 $M \leq 10$，所以把<strong>每一行部署炮兵的状态</strong>作为状态，可以二进制压缩至 <code>int</code> 内。</p><p>因为 DP <strong>从上到下转移</strong>，考虑第 $i$ 行时，要考虑第 $i-1，i-2$ 行，考虑第 $i-1$ 行时，又要考虑 $i-2, i-3$ 行。</p><p><strong>所以令 $f[i][j][k]$ 表示前 $i$ 行，第 $i$ 行状态为 $j$，第 $i-1$ 行状态为 $k$ 时可以部署炮兵部队的最大值。</strong></p><p><strong>初始化：</strong> $f[0][0][0] = 0,$ 其他为 <code>INT_MIN</code></p><p><strong>转移：$f[i][j][k] = max(f[i-1][k][p] + cnt[j]) \ (j, k, p \textbf {是合法的})$</strong></p><p>同时 $j \ and \ k = 0, \ j \ and \ l = 0, \ j \ and \ map[i] = 0$</p><p>时间复杂度 $O(n * S^3) \ (S为一行内合法的状态总数)$。显然，这里 $S \leq m$，则时间应该为十万级别，可以 $\textcolor {green} {AC}$。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">int</span> n, m, tot;</span><br><span class="line"><span class="keyword">int</span> s[<span class="number">128</span>], cnt[<span class="number">128</span>], <span class="built_in">map</span>[<span class="number">128</span>];</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">128</span>][<span class="number">72</span>][<span class="number">72</span>];</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">32</span>];</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">map</span>[i] &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (str[j] == <span class="string">'H'</span>)</span><br><span class="line">                <span class="built_in">map</span>[i] |= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getcount</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x) x -= x &amp; -x, ++sum;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span>&lt;&lt;m); i++)</span><br><span class="line">        <span class="keyword">if</span> (!(i &amp; (i&lt;&lt;<span class="number">1</span>)) &amp;&amp; !(i &amp; (i&lt;&lt;<span class="number">2</span>)))</span><br><span class="line">        &#123;</span><br><span class="line">            s[++tot] = i;</span><br><span class="line">            cnt[tot] = getcount(i);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">207</span>, <span class="keyword">sizeof</span>(f));</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= tot; j++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= tot; k++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">1</span>; p &lt;= tot; p++)</span><br><span class="line">                    <span class="keyword">if</span> ((s[j] &amp; s[k]) == <span class="number">0</span> &amp;&amp; (s[j] &amp; s[p]) == <span class="number">0</span> &amp;&amp; (s[j] &amp; <span class="built_in">map</span>[i]) == <span class="number">0</span>)</span><br><span class="line">                        f[i][j][k] = <span class="built_in">std</span>::max(f[i<span class="number">-1</span>][k][p] + cnt[j], f[i][j][k]);</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= tot; j++)</span><br><span class="line">            ans = <span class="built_in">std</span>::max(f[n][i][j], ans);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    input();</span><br><span class="line">    init();</span><br><span class="line">    work();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>此题是状态压缩毒(<del>mu</del>)瘤(<del>ban</del>)题，在这种 $n$ 或 $m$ 较小的情况下，可以压缩较小的那一个。另外，对于这种依赖于前面结果的 DP，可以把前一个结果加入状态，方便转移。</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 解题报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 状态压缩 </tag>
            
            <tag> DP </tag>
            
            <tag> 状压DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客恢复更新</title>
      <link href="/posts/16107.html"/>
      <url>/posts/16107.html</url>
      
        <content type="html"><![CDATA[<!-- build time:Wed Apr 08 2020 10:08:37 GMT+0800 (GMT+08:00) --><p>博客域名已更换至 <code>baoyh.cf</code>！原 <code>baoyh.ml</code> 不保证可用！请大家收藏新网址！</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 通知 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
